environments:
  default:
    values: [common.yaml]
  control:
    values: [common.yaml]
    kubeContext: kind-llmariner-control-plane
  worker:
    values: [common.yaml]
    kubeContext: kind-llmariner-worker-plane
  tenant-control:
    values: [common.yaml]
    kubeContext: kind-tenant-control-plane
---
repositories:
- name: kong
  url: https://charts.konghq.com
- name: fake-gpu-operator
  url: https://fake-gpu-operator.storage.googleapis.com
- name: milvus
  url: https://zilliztech.github.io/milvus-helm/
- name: prometheus-community
  url: https://prometheus-community.github.io/helm-charts
- name: grafana
  url: https://grafana.github.io/helm-charts

releases:
- name: fake-gpu-operator
  namespace: nvidia
  labels:
    app: fake-gpu-operator
    tier: core
  chart: fake-gpu-operator/fake-gpu-operator
  version: 0.0.51
  hooks:
  - events: ["presync"]
    showlogs: true
    command: "kubectl"
    args:
    - "label"
    - "--context={{`{{.Release.KubeContext|default .Environment.KubeContext}}`}}"
    - "nodes"
    - "--all"
    - "--overwrite"
    - "nvidia.com/gpu.deploy.device-plugin=true"
    - "nvidia.com/gpu.deploy.dcgm-exporter=true"
- name: kong
  namespace: kong
  labels:
    app: kong
    tier: core
  chart: kong/kong
  version: 2.42.0
  set:
  - name: ingressController.installCRDs
    value: false
  values:
  - "kong_values.yaml"

- name: postgres
  namespace: postgres
  labels:
    app: postgres
    tier: core
  version: 16.0.3
  chart: oci://registry-1.docker.io/bitnamicharts/postgresql
  set:
  - name: nameOverride
    value: postgres
  - name: auth.database
    value: ps_db
  - name: auth.username
    value: {{ .Values.postgres.user }}
  - name: auth.password
    value: {{ .Values.postgres.pass }}

- name: minio
  namespace: minio
  labels:
    app: minio
    tier: core
  version: 14.8.0
  chart: oci://registry-1.docker.io/bitnamicharts/minio
  set:
  - name: auth.rootUser
    value: {{ .Values.minio.adminUser }}
  - name: auth.rootPassword
    value: {{ .Values.minio.adminPass }}
  - name: defaultBuckets
    value: {{ .Values.minio.bucket }}
  hooks:
  - events: ["postsync"]
    showlogs: true
    command: "./minio_create_apikey.sh"
    args:
    - {{ .Values.minio.adminUser }}
    - {{ .Values.minio.adminPass }}
    - {{ .Values.minio.accessKey }}
    - {{ .Values.minio.secretKey }}
    - "{{`{{.Release.KubeContext|default .Environment.KubeContext}}`}}"
    - "{{`{{.Release.Namespace}}`}}"
  {{ if eq .Environment.Name "control" }}
  - events: ["postsync", "postuninstall"]
    showlogs: true
    command: kubectl
    args:
    - "{{`{{if eq .Event.Name \"postsync\"}}apply{{else}}delete{{end}}`}}"
    - "--context={{`{{.Release.KubeContext|default .Environment.KubeContext}}`}}"
    - "--namespace={{`{{.Release.Namespace}}`}}"
    - "--filename=minio_service.yaml"
  {{ end }}

- name: redis
  namespace: redis
  labels:
    app: redis
    tier: core
  version: 20.3.0
  chart: oci://registry-1.docker.io/bitnamicharts/redis
  set:
  - name: auth.password
    value: {{ .Values.redis.password }}

- name: milvus
  namespace: milvus
  labels:
    app: milvus
    tier: core
  version: 4.2.15
  chart: milvus/milvus
  values:
  - "milvus_values.yaml"

- name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
    tier: monitoring
  version: 25.27.0
  chart: prometheus-community/prometheus
  set:
  - name: prometheus-pushgateway.enabled
    value: false
  - name: extraScrapeConfigs
    value: |
      - job_name: nvidia-dcgm
        scrape_interval: 5s
        static_configs:
        - targets: ['nvidia-dcgm-exporter.nvidia.svc:9400']
      - job_name: inference-runtimes
        scrape_interval: 10s
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
              - {{if eq .Environment.Name "worker"}}llmariner-wp{{else}}llmariner{{end}}
            selectors:
            - role: pod
              label: "app.kubernetes.io/name=runtime"
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_pod_annotation_llmariner_(.+)
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: pod
      - job_name: inference-engine
        scrape_interval: 10s
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
              - {{if eq .Environment.Name "worker"}}llmariner-wp{{else}}llmariner{{end}}
            selectors:
            - role: pod
              label: "app.kubernetes.io/name=inference-manager-engine"
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_pod_annotation_llmariner_(.+)
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_container_port_number]
            regex: "8084"
            replacement: $1
            action: keep
- name: grafana
  namespace: monitoring
  labels:
    app: grafana
    tier: monitoring
  chart: grafana/grafana
  values:
  - datasources:
     datasources.yaml:
       apiVersion: 1
       datasources:
       - name: Prometheus
         type: prometheus
         url: http://prometheus-server
         isDefault: true
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
        - name: 'default'
          orgId: 1
          folder: 'default'
          type: file
          disableDeletion: true
          editable: true
          options:
            path: /var/lib/grafana/dashboards/standard
    dashboards:
      default:
        nvidia-dcgm-exporter:
          gnetId: 12239
          datasource: Prometheus

- name: llmariner
  namespace: {{if eq .Environment.Name "worker"}}llmariner-wp{{else}}llmariner{{end}}
  labels:
    app: llmariner
    tier: core
  chart: "{{ .Values.llmariner.chartPath }}"
  needs:
  - postgres/postgres
  - minio/minio
  values:
  - "llmariner_values.yaml"
  {{ if eq .Environment.Name "control" }}
  - "./values/llmariner-control-plane.yaml"
  {{ else if eq .Environment.Name "worker" }}
  - "./values/llmariner-worker-plane.yaml"
  {{ else if eq .Environment.Name "tenant-control" }}
  - "./values/tenant-control-plane.yaml"
  {{ end }}
  {{ if .Values.llmariner.deployLatest }}
  - "./values/latest.yaml"
  {{ end }}
  {{ if .Values.llmariner.enableOllamaDynamicModelLoading }}
  - inference-manager-engine:
      ollama:
        dynamicModelLoading: true
  - vector-store-manager-server:
      llmEngineAddr: ollama-dynamic-0:11434
  {{ end }}
  {{ if .Values.llmariner.enableHuggingFaceDownload }}
  - model-manager-loader:
      huggingFaceSecret:
        name: huggingface-key
        apiKeyKey: apiKey
  {{ end }}
  {{ if .Values.llmariner.useFakeFineTuningJob }}
  - job-manager-dispatcher:
      job:
        image: public.ecr.aws/cloudnatix/llmariner/fake-job
        version: latest
        numGpus: 0
  {{ end }}
  - prepare:
      database:
        createSecret: {{ (and (ne .Environment.Name "worker") (ne .Environment.Name "tenant-control")) | toYaml }}
        secret:
          password: {{ .Values.postgres.pass }}
      objectStore:
        createSecret: true
        secret:
          accessKeyId: {{ .Values.minio.accessKey }}
          secretAccessKey: {{ .Values.minio.secretKey }}
      redis:
        createSecret: {{ (and (ne .Environment.Name "worker") (ne .Environment.Name "tenant-control")) | toYaml }}
        secret:
          password: {{ .Values.redis.password }}
      {{ if eq .Environment.Name "worker" }}
      workerRegistration:
        createSecret: true
        secret:
          key: {{ requiredEnv "REGISTRATION_KEY" }}
      {{ end }}
      {{ if eq .Environment.Name "tenant-control" }}
      tenantClusterRegistration:
        createSecret: true
        secret:
          key: {{ requiredEnv "TENANT_API_KEY" }}
      {{ end }}
      {{ if .Values.llmariner.enableHuggingFaceDownload }}
      huggingFaceApiKey:
        createSecret: true
        secret:
          apiKey: {{ requiredEnv "HUGGING_FACE_HUB_TOKEN" }}
      {{ end }}
  set:
    - name: global.databaseSecret.name
      value: {{ .Values.llmariner.psSecretName }}
    - name: global.awsSecret.name
      value: {{ .Values.llmariner.awsSecretName }}
    - name: global.objectStore.s3.bucket
      value: {{ .Values.minio.bucket }}
  {{ if or (eq .Environment.Name "worker") (eq .Environment.Name "tenant-control") }}
  hooks:
  - events: ["postsync","postuninstall"]
    showlogs: true
    command: "./control_plane_service.sh"
    args:
    - "{{`{{if eq .Event.Name \"postsync\"}}apply{{else}}delete{{end}}`}}"
    - "{{`{{.Release.KubeContext|default .Environment.KubeContext}}`}}"
    - "{{`{{.Release.Namespace}}`}}"
  # Create the services in the "default" namespace as well for Jupyter Notebooks and
  # fine-tuning jobs.
  - events: ["postsync","postuninstall"]
    showlogs: true
    command: "./control_plane_service.sh"
    args:
    - "{{`{{if eq .Event.Name \"postsync\"}}apply{{else}}delete{{end}}`}}"
    - "{{`{{.Release.KubeContext|default .Environment.KubeContext}}`}}"
    - "default"
  {{ end }}
